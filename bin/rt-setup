#!/bin/bash

#desc# setup a new test

function usage {
	echo "usage:
   $0 -t testName [-H] -i {pd|qa|local|hostName} [-p alt-port] [-o [-u testUser]] [-U url]
   $0 -I

   testName   eg. jj+test1, jj+mailtest, ... (CSRT_TEST_NAME)
   -i   initialize a new test (CSRT_API)
   -I   to initialize a new test when CSRT_API & CSRT_TEST_NAME are defined
   -H   use http scheme
   -o   open vscode workspaces for test user(s) (a, b and/or c)
   -u   a, b or c (select only one for vscode workspace)
   -U   full url of api

   Env Vars
      CSRT_ROOT    $HOME/csrt-tests

   Examples
      Setup test 'jj+test50' for users a, b & c for onprem pre-release
         bin/rt-setup -t jj+test50 -i oppr
"
	exit
}

function initialize_test {
	# echo "TEMPLATE=$template, CSRT_API=$CSRT_API"
	for user in a b c; do
		local testUserEmail="$DT_USER+${CSRT_TEST_NAME}$user@codestream.com"
		mkdir -p ${user}
		# (cd ${user} && git clone git@github.com:jimmyjayp/regression-testing.git)
		(cd ${user} && git clone git@gitlab.com:jimmyjayp/regression-testing.git)
		cat $repoRoot/templates/$template \
			| sed -e "s|{{CSRT_ROOT}}|$CSRT_ROOT|g" \
			| sed -e "s/{{CSRT_TEST_NAME}}/$CSRT_TEST_NAME/g" \
			| sed -e "s/{{CSRT_PORT}}/$altPort/g" \
			| sed -e "s/{{CSRT_API}}/$CSRT_API/g" \
			| sed -e "s/{{TEST_USER_EMAIL}}/$testUserEmail/g" \
			| sed -e "s/{{TEST_USER}}/$user/g" \
			| sed -e "s|{{CSRT_URL}}|$CSRT_URL|g" \
			| sed -e "s/{{CSRT_SCHEME}}/$CSRT_SCHEME/g" >$user/code.code-workspace
	done
}

function cleanup_test {
	cd $CSRT_ROOT || exit 1
	/bin/rm -rf $CSRT_ROOT/$CSRT_TEST_NAME
	if [ "$CSRT_ENV" == "local"]; then
		/bin/bash --login -c "dt_load_playground api; node bin/cs_delete.js --team $CSRT_TEST_NAME --dtu"
	else
		echo "dt-ssh ${CSRT_ENV}*api web \". ~/.bash_profile; dt_load_playground api; node bin/cs_delete.js --team $CSRT_TEST_NAME --dtu\""
		dt-ssh ${CSRT_ENV}*api web ". ~/.bash_profile; dt_load_playground api; node bin/cs_delete.js --team $CSRT_TEST_NAME --dtu"
	fi
}

function looks_like_ip {
	echo $1 | egrep -qe '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'
}

[ -z "$CSRT_ROOT" ] && export CSRT_ROOT=$HOME/csrt-tests
[ -z "$1" ] && usage
binDir=`dirname $0`
repoRoot=`(cd $binDir/.. && pwd)`
testAction=""
testUser=""
altPort=""
openInCode=0
CSRT_SCHEME=https
useHttp=0
url=""
template=user.vscode-workspace
while getopts "t:i:u:Ip:oHU:" arg
do
	case $arg in
    I) testAction=init;;
	U) export CSRT_URL=$OPTARG;;
	H) useHttp=1;;
	t) export CSRT_TEST_NAME=$OPTARG;;  # jj+test1
	i) testAction=init; export CSRT_ENV=$OPTARG;;
	p) altPort=":$OPTARG";;
	u) testUser=$OPTARG;;
	o) openInCode=1;;
	*) usage;;
	esac
done
shift `expr $OPTIND - 1`
if [ -n "$CSRT_URL" ]; then
	[ -z "$CSRT_ENV" ] && export CSRT_ENV=local
	[ -z "$CSRT_TEST_NAME" ] && echo "-t <testName> required" && exit 1
	template=user+url.vscode-workspace
	testAction=init
	echo "CSRT_ENV=$CSRT_ENV"
else
	case "$CSRT_ENV" in
		pd|qa)	export CSRT_API=$CSRT_ENV-api.codestream.us;;
		local) export CSRT_API=localhost.codestream.us:12079;;
		localhostx) export CSRT_API=localhost;;
		*)  looks_like_ip $CSRT_ENV && export CSRT_API=$CSRT_ENV || export CSRT_API=$CSRT_ENV.codestream.us;;
	esac
	[ "$altPort" == ":80" ] && CSRT_SCHEME=http && altPort=""
	[ $useHttp -eq 1 ] && CSRT_SCHEME=http

	[ \( -z "$CSRT_API" -a "$testAction" != ide \) -o -z "$CSRT_TEST_NAME" -o -z "$testAction" ] && usage
fi

# clear out pre-existing test
[ $testAction == init -a -d $CSRT_ROOT/$CSRT_TEST_NAME ] && echo "rm -rf $CSRT_ROOT/$CSRT_TEST_NAME" && rm -rf $CSRT_ROOT/$CSRT_TEST_NAME

[ ! -d $CSRT_ROOT/$CSRT_TEST_NAME ] && { echo mkdir -p $CSRT_ROOT/$CSRT_TEST_NAME && mkdir -p $CSRT_ROOT/$CSRT_TEST_NAME || exit 1; }
cd $CSRT_ROOT/$CSRT_TEST_NAME

[ $testAction == init ] && initialize_test && ls -1 $CSRT_ROOT/$CSRT_TEST_NAME/?/code.* && [ $openInCode -eq 1 ] && code $CSRT_ROOT/$CSRT_TEST_NAME/$testUser/code.*
